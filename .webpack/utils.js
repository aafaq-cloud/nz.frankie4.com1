const path = require("path");

const VueLoaderPlugin = require("vue-loader/lib/plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const pkg = require("../package.json");

const babelrc = require("../.babelrc");

const entry = {
  theme: "./src/interface/scripts/index.js"
};

const outPath = path.resolve(process.cwd(), "dist");
const jsOutPath = "assets";

const resolve = {
  extensions: [".js", ".vue", ".json", ".scss"],
  // Should be kept up to date with eslint resolver moduleDirectory
  alias: {
    vue:
      process.env.NODE_ENV === "production"
        ? path.resolve("./node_modules/vue/dist/vue.min.js")
        : path.resolve("./node_modules/vue/dist/vue.esm.js"),
    class: path.resolve(process.cwd(), `src/interface/scripts/class`),
    helpers: path.resolve(process.cwd(), `src/interface/scripts/helpers`)
  },
  symlinks: false
};

const rules = [
  {
    test: /(.jsx?)$/,
    exclude: /node_modules/,
    use: [
      {
        loader: "babel-loader",
        options: {
          cacheDirectory: true,
          ...babelrc
        }
      }
    ]
  },
  {
    test: /\.vue$/,
    loader: "vue-loader"
  }
];

const plugins = [new VueLoaderPlugin()];

const devSnippets = [
  new HtmlWebpackPlugin({
    filename: "snippets/script-tags.liquid",
    inject: false,
    templateContent: ({ htmlWebpackPlugin }) => `{% comment %}
This file is auto-generated by HTMLWebpackPlugin
{% endcomment %}
${htmlWebpackPlugin.tags.bodyTags}`
  }),
  new HtmlWebpackPlugin({
    filename: "snippets/style-tags.liquid",
    inject: false,
    templateContent: ({ htmlWebpackPlugin }) =>
      `{% comment %}
This file is auto-generated by HTMLWebpackPlugin
{% endcomment %}
${htmlWebpackPlugin.tags.headTags}`
  })
];

const prodScriptTags = tags =>
  tags
    .map(tag => {
      const [, assetPath] = tag.match(/\/([^\/]*)$/);
      return `<script src="{{ '${assetPath}' | asset_url }}"{% if async == true %}async{% endif %}{% if defer == true %}defer{% endif %}></script>`;
    })
    .join("");

const prodStyleTags = tags =>
  tags
    .map(tag => {
      const [, assetPath] = tag.match(/\/([^\/]*)$/);
      return `{{ '${assetPath}' | asset_url | stylesheet_tag }}`;
    })
    .join("");

const prodSnippets = [
  new HtmlWebpackPlugin({
    filename: "../snippets/script-tags.liquid",
    inject: false,
    minify: false,
    templateContent: ({htmlWebpackPlugin}) =>
        `{% comment %}This file is auto-generated by HTMLWebpackPlugin{% endcomment %}
        ${prodScriptTags(htmlWebpackPlugin.files.js)}`
  }),
  new HtmlWebpackPlugin({
    filename: "../snippets/style-tags.liquid",
    inject: false,
    templateContent: ({htmlWebpackPlugin}) =>
        `{% comment %}This file is auto-generated by HTMLWebpackPlugin{% endcomment %}
        ${prodStyleTags(htmlWebpackPlugin.files.css)}`
  })
];

const sassPaths = [path.resolve(process.cwd(), `src/interface/scss/settings`)];

const GLOBALS = {};

module.exports = {
  entry,
  outPath,
  jsOutPath,
  resolve,
  rules,
  plugins,
  devSnippets,
  prodSnippets,
  sassPaths,
  GLOBALS
};
